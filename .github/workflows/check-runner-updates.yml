name: Check for GitHub Runner Updates

on:
  schedule:
    # Check for updates every day at 6 AM UTC
    - cron: '0 6 * * *'
  workflow_dispatch: # Allow manual triggering

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  check-updates:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get latest GitHub runner version
        id: runner-version
        run: |
          # Get the latest release from GitHub Actions runner repository
          LATEST_VERSION=$(curl -s https://api.github.com/repos/actions/runner/releases/latest | jq -r '.tag_name' | sed 's/^v//')
          echo "latest_version=$LATEST_VERSION" >> $GITHUB_OUTPUT
          
          # Get current version from Dockerfile
          CURRENT_VERSION=$(grep -oP 'ARG RUNNER_VERSION="\K[^"]*' Dockerfile)
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          
          echo "Latest runner version: $LATEST_VERSION"
          echo "Current version in repo: $CURRENT_VERSION"

      - name: Check if update is needed
        id: check-update
        run: |
          if [ "${{ steps.runner-version.outputs.latest_version }}" != "${{ steps.runner-version.outputs.current_version }}" ]; then
            echo "update_needed=true" >> $GITHUB_OUTPUT
            echo "Update needed: ${{ steps.runner-version.outputs.current_version }} -> ${{ steps.runner-version.outputs.latest_version }}"
          else
            echo "update_needed=false" >> $GITHUB_OUTPUT
            echo "No update needed"
          fi

      - name: Create Pull Request with version update
        if: steps.check-update.outputs.update_needed == 'true'
        run: |
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Create a new branch
          BRANCH_NAME="update-runner-${{ steps.runner-version.outputs.latest_version }}"
          git checkout -b $BRANCH_NAME
          
          # Update Dockerfile
          sed -i 's/ARG RUNNER_VERSION="[^"]*"/ARG RUNNER_VERSION="${{ steps.runner-version.outputs.latest_version }}"/' Dockerfile
          
          # Update workflow file
          sed -i 's/RUNNER_VERSION=[0-9.]*/RUNNER_VERSION=${{ steps.runner-version.outputs.latest_version }}/' .github/workflows/build-and-publish.yml
          
          # Commit changes
          git add Dockerfile .github/workflows/build-and-publish.yml
          git commit -m "Update GitHub Actions runner to v${{ steps.runner-version.outputs.latest_version }}"
          
          # Push branch
          git push origin $BRANCH_NAME
          
          # Create pull request
          gh pr create \
            --title "Update GitHub Actions runner to v${{ steps.runner-version.outputs.latest_version }}" \
            --body "Automated update of GitHub Actions runner from v${{ steps.runner-version.outputs.current_version }} to v${{ steps.runner-version.outputs.latest_version }}.

          This PR includes:
          - Updated Dockerfile with new runner version
          - Updated build workflow with new version
          
          The new container image will be automatically built and published when this PR is merged." \
            --head $BRANCH_NAME \
            --base main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Auto-merge if update is a patch/minor version
        if: steps.check-update.outputs.update_needed == 'true'
        run: |
          # Extract version components
          CURRENT_MAJOR=$(echo "${{ steps.runner-version.outputs.current_version }}" | cut -d. -f1)
          CURRENT_MINOR=$(echo "${{ steps.runner-version.outputs.current_version }}" | cut -d. -f2)
          LATEST_MAJOR=$(echo "${{ steps.runner-version.outputs.latest_version }}" | cut -d. -f1)
          LATEST_MINOR=$(echo "${{ steps.runner-version.outputs.latest_version }}" | cut -d. -f2)
          
          # Auto-merge if it's not a major version change
          if [ "$CURRENT_MAJOR" == "$LATEST_MAJOR" ] && [ "$CURRENT_MINOR" == "$LATEST_MINOR" ]; then
            echo "Patch version update detected - will auto-merge"
            BRANCH_NAME="update-runner-${{ steps.runner-version.outputs.latest_version }}"
            gh pr merge $BRANCH_NAME --auto --squash
          else
            echo "Major/minor version update detected - manual review required"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}